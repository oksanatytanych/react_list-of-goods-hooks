{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortBy","goodsFromServer","App","useState","default","sortField","setSortField","reverseField","setReverseField","visibleGoods","goods","prepareGoods","reverse","sort","a","b","asc","localeCompare","length","getPrepareGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,qBAAAA,I,mBAAAA,I,cAAAA,M,KA0CE,IAAME,EAAgB,WAC3B,MAAkCC,mBAChCH,EAAOI,SADT,mBAAOC,EAAP,KAAkBC,EAAlB,KAGA,EAAwCH,oBAAkB,GAA1D,mBAAOI,EAAP,KAAqBC,EAArB,KAEMC,EA1CR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAY,YAAOD,GA4BzB,OA1BKL,GAAaE,EAChBI,EAAaC,UACJP,GACTM,EAAaE,MAAK,SAACC,EAAGC,GACpB,GAAKR,EAUH,OAAQF,GACN,KAAKL,EAAOgB,IACV,OAAOD,EAAEE,cAAcH,GACzB,KAAKd,EAAOkB,OACV,OAAOH,EAAEG,OAASJ,EAAEI,OACtB,QACE,OAAO,OAfX,OAAQb,GACN,KAAKL,EAAOgB,IACV,OAAOF,EAAEG,cAAcF,GACzB,KAAKf,EAAOkB,OACV,OAAOJ,EAAEI,OAASH,EAAEG,OACtB,QACE,OAAO,MAeVP,EAScQ,CACnBlB,EACAI,EACAE,GASF,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYjB,IAAcL,EAAOgB,MAErCO,QAAS,kBAAMjB,EAAaN,EAAOgB,MAPrC,iCAYA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYjB,IAAcL,EAAOkB,SAErCK,QAAS,kBAAMjB,EAAaN,EAAOkB,SAPrC,4BAYA,wBACEG,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYf,IAEhBgB,QAAS,WArCff,GAFsBD,IAgClB,sBAYEF,GAAaE,IACb,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPjB,EAAaN,EAAOI,SACpBI,GAAgB,IALpB,sBAaJ,6BACGC,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAAwCA,GAAxC,cAA+BA,aCnIzCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4ff14222.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortBy {\n  default,\n  length,\n  asc,\n}\n\nfunction getPrepareGoods(\n  goods: string[],\n  sortField: SortBy,\n  reverseField: boolean,\n): string[] {\n  const prepareGoods = [...goods];\n\n  if (!sortField && reverseField) {\n    prepareGoods.reverse();\n  } else if (sortField) {\n    prepareGoods.sort((a, b) => {\n      if (!reverseField) {\n        switch (sortField) {\n          case SortBy.asc:\n            return a.localeCompare(b);\n          case SortBy.length:\n            return a.length - b.length;\n          default:\n            return 0;\n        }\n      } else {\n        switch (sortField) {\n          case SortBy.asc:\n            return b.localeCompare(a);\n          case SortBy.length:\n            return b.length - a.length;\n          default:\n            return 0;\n        }\n      }\n    });\n  }\n\n  return prepareGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortBy>(\n    SortBy.default,\n  );\n  const [reverseField, setReverseField] = useState<boolean>(false);\n\n  const visibleGoods = getPrepareGoods(\n    goodsFromServer,\n    sortField,\n    reverseField,\n  );\n\n  function reverseWithConditions() {\n    const reverseValue = !reverseField;\n\n    setReverseField(reverseValue);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SortBy.asc },\n          )}\n          onClick={() => setSortField(SortBy.asc)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SortBy.length },\n          )}\n          onClick={() => setSortField(SortBy.length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': reverseField },\n          )}\n          onClick={() => reverseWithConditions()}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField(SortBy.default);\n              setReverseField(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={`#id-${good}`}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}